{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.some.js\";\n// 判断是否为代码\n// export const isCode = content => {\n//     return content.startsWith('```') || /^\\s{4}/.test(content)\n//     // if (!content || typeof content !== 'string') return false\n//     // return content.includes('\\n') || content.includes('function') || content.includes('class')\n// }\nexport function isCode(content) {\n  // 如果内容包含代码块分隔符（``` 或 ~~~），则认为是代码\n  if (/```[\\s\\S]*```|~~~[\\s\\S]*~~~/g.test(content)) {\n    return true;\n  }\n\n  // 如果内容包含明显的代码片段（如 HTML、CSS、JavaScript 等），则认为是代码\n  const codePatterns = [/<[^>]+>/,\n  // HTML 标签\n  /{[^}]+}/,\n  // CSS 样式\n  /function\\s+\\w+\\(/,\n  // JavaScript 函数\n  /console\\.log\\(/ // JavaScript 日志\n  ];\n  return codePatterns.some(pattern => pattern.test(content));\n}\nexport function splitMixedContent(content) {\n  const parts = [];\n  const codeBlockRegex = /```([\\s\\S]*?)```|~~~([\\s\\S]*?)~~~/g; // 匹配代码块\n  let lastIndex = 0;\n\n  // 查找所有代码块\n  content.replace(codeBlockRegex, (match, p1, p2, offset) => {\n    // 添加代码块之前的 Markdown 内容\n    if (offset > lastIndex) {\n      parts.push({\n        type: 'markdown',\n        content: content.slice(lastIndex, offset)\n      });\n    }\n\n    // 添加代码块\n    const codeContent = p1 || p2;\n    parts.push({\n      type: 'code',\n      content: codeContent\n    });\n    lastIndex = offset + match.length;\n    return match;\n  });\n\n  // 添加剩余的 Markdown 内容\n  if (lastIndex < content.length) {\n    parts.push({\n      type: 'markdown',\n      content: content.slice(lastIndex)\n    });\n  }\n  return parts;\n}\n// 自动调整输入框高度\nexport const autoResizeTextarea = textarea => {\n  textarea.style.height = 'auto';\n  textarea.style.height = `${textarea.scrollHeight}px`;\n};\n\n// 重置输入框高度\nexport const resetTextareaHeight = textarea => {\n  textarea.style.height = 'auto';\n};\nexport const generateUniqueId = () => {\n  return Date.now().toString(36) + Math.random().toString(36).substring(2);\n};","map":{"version":3,"names":["isCode","content","test","codePatterns","some","pattern","splitMixedContent","parts","codeBlockRegex","lastIndex","replace","match","p1","p2","offset","push","type","slice","codeContent","length","autoResizeTextarea","textarea","style","height","scrollHeight","resetTextareaHeight","generateUniqueId","Date","now","toString","Math","random","substring"],"sources":["/Users/mac/ZSJ/weChat/ai/src/utils/helpers.js"],"sourcesContent":["// 判断是否为代码\n// export const isCode = content => {\n//     return content.startsWith('```') || /^\\s{4}/.test(content)\n//     // if (!content || typeof content !== 'string') return false\n//     // return content.includes('\\n') || content.includes('function') || content.includes('class')\n// }\nexport function isCode(content) {\n    // 如果内容包含代码块分隔符（``` 或 ~~~），则认为是代码\n    if (/```[\\s\\S]*```|~~~[\\s\\S]*~~~/g.test(content)) {\n        return true\n    }\n\n    // 如果内容包含明显的代码片段（如 HTML、CSS、JavaScript 等），则认为是代码\n    const codePatterns = [\n        /<[^>]+>/, // HTML 标签\n        /{[^}]+}/, // CSS 样式\n        /function\\s+\\w+\\(/, // JavaScript 函数\n        /console\\.log\\(/ // JavaScript 日志\n    ]\n\n    return codePatterns.some(pattern => pattern.test(content))\n}\n\nexport function splitMixedContent(content) {\n    const parts = []\n    const codeBlockRegex = /```([\\s\\S]*?)```|~~~([\\s\\S]*?)~~~/g // 匹配代码块\n    let lastIndex = 0\n\n    // 查找所有代码块\n    content.replace(codeBlockRegex, (match, p1, p2, offset) => {\n        // 添加代码块之前的 Markdown 内容\n        if (offset > lastIndex) {\n            parts.push({\n                type: 'markdown',\n                content: content.slice(lastIndex, offset)\n            })\n        }\n\n        // 添加代码块\n        const codeContent = p1 || p2\n        parts.push({\n            type: 'code',\n            content: codeContent\n        })\n\n        lastIndex = offset + match.length\n        return match\n    })\n\n    // 添加剩余的 Markdown 内容\n    if (lastIndex < content.length) {\n        parts.push({\n            type: 'markdown',\n            content: content.slice(lastIndex)\n        })\n    }\n\n    return parts\n}\n// 自动调整输入框高度\nexport const autoResizeTextarea = textarea => {\n    textarea.style.height = 'auto'\n    textarea.style.height = `${textarea.scrollHeight}px`\n}\n\n// 重置输入框高度\nexport const resetTextareaHeight = textarea => {\n    textarea.style.height = 'auto'\n}\n\nexport const generateUniqueId = () => {\n    return Date.now().toString(36) + Math.random().toString(36).substring(2)\n}\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,MAAMA,CAACC,OAAO,EAAE;EAC5B;EACA,IAAI,8BAA8B,CAACC,IAAI,CAACD,OAAO,CAAC,EAAE;IAC9C,OAAO,IAAI;EACf;;EAEA;EACA,MAAME,YAAY,GAAG,CACjB,SAAS;EAAE;EACX,SAAS;EAAE;EACX,kBAAkB;EAAE;EACpB,gBAAgB,CAAC;EAAA,CACpB;EAED,OAAOA,YAAY,CAACC,IAAI,CAACC,OAAO,IAAIA,OAAO,CAACH,IAAI,CAACD,OAAO,CAAC,CAAC;AAC9D;AAEA,OAAO,SAASK,iBAAiBA,CAACL,OAAO,EAAE;EACvC,MAAMM,KAAK,GAAG,EAAE;EAChB,MAAMC,cAAc,GAAG,oCAAoC,EAAC;EAC5D,IAAIC,SAAS,GAAG,CAAC;;EAEjB;EACAR,OAAO,CAACS,OAAO,CAACF,cAAc,EAAE,CAACG,KAAK,EAAEC,EAAE,EAAEC,EAAE,EAAEC,MAAM,KAAK;IACvD;IACA,IAAIA,MAAM,GAAGL,SAAS,EAAE;MACpBF,KAAK,CAACQ,IAAI,CAAC;QACPC,IAAI,EAAE,UAAU;QAChBf,OAAO,EAAEA,OAAO,CAACgB,KAAK,CAACR,SAAS,EAAEK,MAAM;MAC5C,CAAC,CAAC;IACN;;IAEA;IACA,MAAMI,WAAW,GAAGN,EAAE,IAAIC,EAAE;IAC5BN,KAAK,CAACQ,IAAI,CAAC;MACPC,IAAI,EAAE,MAAM;MACZf,OAAO,EAAEiB;IACb,CAAC,CAAC;IAEFT,SAAS,GAAGK,MAAM,GAAGH,KAAK,CAACQ,MAAM;IACjC,OAAOR,KAAK;EAChB,CAAC,CAAC;;EAEF;EACA,IAAIF,SAAS,GAAGR,OAAO,CAACkB,MAAM,EAAE;IAC5BZ,KAAK,CAACQ,IAAI,CAAC;MACPC,IAAI,EAAE,UAAU;MAChBf,OAAO,EAAEA,OAAO,CAACgB,KAAK,CAACR,SAAS;IACpC,CAAC,CAAC;EACN;EAEA,OAAOF,KAAK;AAChB;AACA;AACA,OAAO,MAAMa,kBAAkB,GAAGC,QAAQ,IAAI;EAC1CA,QAAQ,CAACC,KAAK,CAACC,MAAM,GAAG,MAAM;EAC9BF,QAAQ,CAACC,KAAK,CAACC,MAAM,GAAG,GAAGF,QAAQ,CAACG,YAAY,IAAI;AACxD,CAAC;;AAED;AACA,OAAO,MAAMC,mBAAmB,GAAGJ,QAAQ,IAAI;EAC3CA,QAAQ,CAACC,KAAK,CAACC,MAAM,GAAG,MAAM;AAClC,CAAC;AAED,OAAO,MAAMG,gBAAgB,GAAGA,CAAA,KAAM;EAClC,OAAOC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACF,QAAQ,CAAC,EAAE,CAAC,CAACG,SAAS,CAAC,CAAC,CAAC;AAC5E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}