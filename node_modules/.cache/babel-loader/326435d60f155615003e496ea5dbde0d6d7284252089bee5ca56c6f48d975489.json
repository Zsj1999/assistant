{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { API_CONFIG } from '../../utils/api';\nimport IconGlm from '../IconBox/IconGlm.vue';\nexport default {\n  components: {\n    IconGlm\n  },\n  data() {\n    return {\n      inputText: '',\n      videoUrl: '',\n      coverImageUrl: '',\n      imageUrl: null,\n      // 用于显示上传的图片\n      imageBase64: '',\n      // 用于传递Base64编码的图片\n      isLoading: false,\n      disabled: false,\n      inputTip: '',\n      generatedContent: null\n    };\n  },\n  methods: {\n    async optimizeInput() {\n      if (!this.inputText) return;\n      this.isLoading = true;\n      try {\n        this.inputTip = '提示词优化中，请稍后！';\n        const optimizedPrompt = await this.optimizePrompt(this.inputText);\n        if (optimizedPrompt) {\n          this.inputText = optimizedPrompt;\n        }\n      } catch (error) {\n        console.error('Error optimizing prompt:', error);\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    async submitData() {\n      if (!this.inputText) return;\n\n      // 直接生成视频\n      const {\n        apiUrl,\n        apiKey,\n        modelName\n      } = API_CONFIG['bigmodelCogVideo'];\n      const fullPrompt = `${this.inputText}`;\n\n      // 如果有上传的图像，将图像 URL 或 Base64 传入\n      const requestBody = {\n        model: modelName,\n        prompt: fullPrompt,\n        with_audio: true,\n        image_url: this.imageBase64 ? `data:image/png;base64,${this.imageBase64}` : null\n      };\n\n      // 生成视频并轮询任务状态\n      const taskId = await this.generateVideo(apiUrl, apiKey, modelName, requestBody);\n      if (taskId) {\n        await this.pollTaskStatus(taskId);\n      }\n    },\n    async optimizePrompt(userInput) {\n      try {\n        const {\n          apiUrl,\n          apiKey,\n          modelName\n        } = API_CONFIG['bigmodel'];\n        const requestBody = {\n          model: modelName,\n          stream: false,\n          temperature: 0.8,\n          messages: [{\n            role: 'system',\n            content: `你是一名提示词优化助手，请将用户的白话描述转换更加动人和详细，重点在动作，100以内`\n          }, {\n            role: 'user',\n            content: `${userInput}`\n          }]\n        };\n        const response = await fetch(apiUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${apiKey}`\n          },\n          body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const result = await response.json();\n        return result.choices[0].message.content || '';\n      } catch (error) {\n        console.error('Error optimizing prompt:', error);\n        return null;\n      }\n    },\n    async generateVideo(apiUrl, apiKey, modelName, requestBody) {\n      this.inputTip = '生成中，请不要退出页面！';\n      this.isLoading = true;\n      this.videoUrl = null;\n      try {\n        const response = await fetch(apiUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${apiKey}`\n          },\n          body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const result = await response.json();\n        return result.id; // 假设返回的任务 ID 字段为 task_id\n      } catch (error) {\n        console.error('Error generating video:', error);\n        return null;\n      }\n    },\n    async pollTaskStatus(taskId) {\n      const {\n        apiKey\n      } = API_CONFIG['bigmodelCogVideo'];\n      const maxAttempts = 30; // 最大轮询次数\n      const interval = 5000; // 轮询间隔 5 秒\n\n      for (let i = 0; i < maxAttempts; i++) {\n        try {\n          const response = await fetch(`https://open.bigmodel.cn/api/paas/v4/async-result/${taskId}`, {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: `Bearer ${apiKey}`\n            }\n          });\n          if (!response.ok) {\n            const errorResponse = await response.json(); // 解析错误响应\n            const errorMessage = errorResponse.error?.message || `HTTP error! Status: ${response.status}`;\n            throw new Error(errorMessage); // 抛出错误信息\n          }\n          const result = await response.json();\n          if (result.task_status === 'SUCCESS') {\n            this.isLoading = false;\n            this.videoUrl = result.video_result[0]?.url;\n            this.coverImageUrl = result.video_result[0]?.cover_image_url;\n            this.imageUrl = null; // 清除上传的图片\n            return;\n          } else if (result.status === 'failed') {\n            throw new Error('Video generation failed');\n          }\n        } catch (error) {\n          console.error('Error polling task status:', error);\n          alert(error.message); // 弹出错误信息\n          this.isLoading = false;\n          this.videoUrl = null;\n          this.coverImageUrl = null;\n          this.imageUrl = null;\n          this.inputText = '';\n          return;\n        }\n        await new Promise(resolve => setTimeout(resolve, interval));\n      }\n      console.error('Task polling timed out');\n    },\n    // 上传图片\n    async handleImageUpload(event) {\n      this.generatedContent = null;\n      const file = event.target.files[0];\n      if (!file) return;\n\n      // 检查文件格式\n      const allowedTypes = ['image/jpg', 'image/jpeg', 'image/png'];\n      if (!allowedTypes.includes(file.type)) {\n        alert('仅支持 JPG、JPEG、PNG 格式的图片');\n        return;\n      }\n\n      // 检查图片像素（不超过 6000x6000）\n      const img = new Image();\n      img.src = URL.createObjectURL(file);\n      img.onload = async () => {\n        const width = img.width;\n        const height = img.height;\n        if (width > 6000 || height > 6000) {\n          alert('图片像素不能超过 6000x6000');\n          return;\n        }\n\n        // 如果图片大小超过 5MB，则进行压缩\n        if (file.size > 5 * 1024 * 1024) {\n          try {\n            const compressedFile = await this.compressImage(file);\n            this.imageUrl = URL.createObjectURL(compressedFile);\n            this.imageBase64 = await this.fileToBase64(compressedFile);\n          } catch (error) {\n            console.error('图片压缩失败:', error);\n            alert('图片压缩失败，请重试');\n            return;\n          }\n        } else {\n          // 图片大小在 5MB 以内，直接处理\n          const reader = new FileReader();\n          reader.onload = e => {\n            this.imageUrl = e.target.result; // 用于显示图片\n            this.imageBase64 = e.target.result.split(',')[1]; // 提取 Base64 数据部分\n          };\n          reader.readAsDataURL(file);\n        }\n      };\n    },\n    // 压缩图片\n    compressImage(file) {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.src = URL.createObjectURL(file);\n        img.onload = () => {\n          const canvas = document.createElement('canvas');\n          const ctx = canvas.getContext('2d');\n\n          // 设置最大宽度和高度\n          const maxWidth = 6000;\n          const maxHeight = 6000;\n          let width = img.width;\n          let height = img.height;\n          if (width > maxWidth || height > maxHeight) {\n            const ratio = Math.min(maxWidth / width, maxHeight / height);\n            width *= ratio;\n            height *= ratio;\n          }\n          canvas.width = width;\n          canvas.height = height;\n\n          // 绘制图片到 canvas\n          ctx.drawImage(img, 0, 0, width, height);\n\n          // 将 canvas 转换为 Blob\n          canvas.toBlob(blob => {\n            if (!blob) {\n              reject(new Error('图片压缩失败'));\n              return;\n            }\n\n            // 检查压缩后的文件大小\n            if (blob.size > 5 * 1024 * 1024) {\n              // 如果仍然大于 5MB，降低质量\n              canvas.toBlob(newBlob => {\n                if (!newBlob) {\n                  reject(new Error('图片压缩失败'));\n                  return;\n                }\n                resolve(newBlob);\n              }, file.type, 0.5 // 降低质量\n              );\n            } else {\n              resolve(blob);\n            }\n          }, file.type, 0.8 // 初始质量\n          );\n        };\n        img.onerror = error => reject(error);\n      });\n    },\n    // 将文件转换为 Base64\n    fileToBase64(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = e => resolve(e.target.result.split(',')[1]);\n        reader.onerror = error => reject(error);\n        reader.readAsDataURL(file);\n      });\n    }\n  }\n};","map":{"version":3,"names":["API_CONFIG","IconGlm","components","data","inputText","videoUrl","coverImageUrl","imageUrl","imageBase64","isLoading","disabled","inputTip","generatedContent","methods","optimizeInput","optimizedPrompt","optimizePrompt","error","console","submitData","apiUrl","apiKey","modelName","fullPrompt","requestBody","model","prompt","with_audio","image_url","taskId","generateVideo","pollTaskStatus","userInput","stream","temperature","messages","role","content","response","fetch","method","headers","Authorization","body","JSON","stringify","ok","Error","status","result","json","choices","message","id","maxAttempts","interval","i","errorResponse","errorMessage","task_status","video_result","url","cover_image_url","alert","Promise","resolve","setTimeout","handleImageUpload","event","file","target","files","allowedTypes","includes","type","img","Image","src","URL","createObjectURL","onload","width","height","size","compressedFile","compressImage","fileToBase64","reader","FileReader","e","split","readAsDataURL","reject","canvas","document","createElement","ctx","getContext","maxWidth","maxHeight","ratio","Math","min","drawImage","toBlob","blob","newBlob","onerror"],"sources":["src/components/ImgBox/VideoImg.vue"],"sourcesContent":["<template>\n    <div class=\"container mx-auto pl-4 pr-4\">\n        <!-- 选项卡切换 -->\n\n        <div class=\"flex flex-col lg:flex-row lg:gap-8 lg:mt-10\">\n            <!-- 视频展示区域 -->\n            <div class=\"w-full aspect-[4/3] mb-4 rounded-md overflow-hidden lg:w-1/2 lg:mb-0 relative\">\n                <!-- 如果图片上传了，则显示上传的图片 -->\n                <img v-if=\"imageUrl && !videoUrl\" :src=\"imageUrl\" alt=\"Uploaded Image\" class=\"w-full h-full object-cover absolute top-0 left-0\" />\n                <!-- 视频显示 -->\n                <video v-if=\"videoUrl\" :src=\"videoUrl\" :poster=\"coverImageUrl\" controls class=\"w-full h-full object-cover\"></video>\n                <!-- 加载动画 -->\n                <div v-if=\"isLoading && imageUrl\" class=\"absolute top-0 left-0 w-full h-full flex justify-center items-center bg-gray-900 bg-opacity-50\">\n                    <div class=\"spinner-border animate-spin border-t-4 border-b-4 border-blue-500 w-16 h-16 rounded-full\"></div>\n                </div>\n                <div v-if=\"!videoUrl && !imageUrl\" class=\"w-full h-full bg-gray-100 flex items-center justify-center\">\n                    <IconGlm />\n                </div>\n            </div>\n\n            <div class=\"w-full lg:w-1/2 flex flex-col justify-between\">\n                <!-- 上传图片 -->\n                <div>\n                    <label for=\"imageUpload\" class=\"text-sm font-semibold mb-2\">上传图像（可选）</label>\n                    <input\n                        type=\"file\"\n                        accept=\"image/jpg, image/jpeg, image/png\"\n                        @change=\"handleImageUpload\"\n                        :disabled=\"isLoading\"\n                        class=\"mb-4 mt-2 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 disabled:opacity-50 disabled:cursor-not-allowed\"\n                    />\n                </div>\n\n                <div class=\"relative\">\n                    <label for=\"inputText\" class=\"text-sm font-semibold\">\n                        描述\n                        <a href=\"javascript:void(0)\" class=\"text-blue-500 cursor-pointer float-right\" @click=\"optimizeInput\">优化提示词</a>\n                    </label>\n                    <textarea\n                        v-model=\"inputText\"\n                        :disabled=\"disabled\"\n                        class=\"text-sm w-full h-[120px] p-2 text-lg border rounded-md focus:ring-2 mb-4 mt-2\"\n                        placeholder=\"请输入您希望生成的视频效果描述！\"\n                    ></textarea>\n                </div>\n\n                <button\n                    @click=\"submitData\"\n                    class=\"text-sm w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-all\"\n                    :disabled=\"!inputText || isLoading\"\n                >\n                    {{ isLoading ? inputTip : '开始创作' }}\n                </button>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { API_CONFIG } from '../../utils/api'\nimport IconGlm from '../IconBox/IconGlm.vue'\n\nexport default {\n    components: {\n        IconGlm\n    },\n    data() {\n        return {\n            inputText: '',\n            videoUrl: '',\n            coverImageUrl: '',\n            imageUrl: null, // 用于显示上传的图片\n            imageBase64: '', // 用于传递Base64编码的图片\n            isLoading: false,\n            disabled: false,\n            inputTip: '',\n            generatedContent: null\n        }\n    },\n    methods: {\n        async optimizeInput() {\n            if (!this.inputText) return\n\n            this.isLoading = true\n            try {\n                this.inputTip = '提示词优化中，请稍后！'\n                const optimizedPrompt = await this.optimizePrompt(this.inputText)\n                if (optimizedPrompt) {\n                    this.inputText = optimizedPrompt\n                }\n            } catch (error) {\n                console.error('Error optimizing prompt:', error)\n            } finally {\n                this.isLoading = false\n            }\n        },\n        async submitData() {\n            if (!this.inputText) return\n\n            // 直接生成视频\n            const { apiUrl, apiKey, modelName } = API_CONFIG['bigmodelCogVideo']\n            const fullPrompt = `${this.inputText}`\n\n            // 如果有上传的图像，将图像 URL 或 Base64 传入\n            const requestBody = {\n                model: modelName,\n                prompt: fullPrompt,\n                with_audio: true,\n                image_url: this.imageBase64 ? `data:image/png;base64,${this.imageBase64}` : null\n            }\n\n            // 生成视频并轮询任务状态\n            const taskId = await this.generateVideo(apiUrl, apiKey, modelName, requestBody)\n            if (taskId) {\n                await this.pollTaskStatus(taskId)\n            }\n        },\n        async optimizePrompt(userInput) {\n            try {\n                const { apiUrl, apiKey, modelName } = API_CONFIG['bigmodel']\n                const requestBody = {\n                    model: modelName,\n                    stream: false,\n                    temperature: 0.8,\n                    messages: [\n                        {\n                            role: 'system',\n                            content: `你是一名提示词优化助手，请将用户的白话描述转换更加动人和详细，重点在动作，100以内`\n                        },\n                        { role: 'user', content: `${userInput}` }\n                    ]\n                }\n                const response = await fetch(apiUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${apiKey}`\n                    },\n                    body: JSON.stringify(requestBody)\n                })\n\n                if (!response.ok) {\n                    throw new Error(`HTTP error! Status: ${response.status}`)\n                }\n\n                const result = await response.json()\n                return result.choices[0].message.content || ''\n            } catch (error) {\n                console.error('Error optimizing prompt:', error)\n                return null\n            }\n        },\n        async generateVideo(apiUrl, apiKey, modelName, requestBody) {\n            this.inputTip = '生成中，请不要退出页面！'\n            this.isLoading = true\n            this.videoUrl = null\n            try {\n                const response = await fetch(apiUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${apiKey}`\n                    },\n                    body: JSON.stringify(requestBody)\n                })\n\n                if (!response.ok) {\n                    throw new Error(`HTTP error! Status: ${response.status}`)\n                }\n\n                const result = await response.json()\n\n                return result.id // 假设返回的任务 ID 字段为 task_id\n            } catch (error) {\n                console.error('Error generating video:', error)\n                return null\n            }\n        },\n        async pollTaskStatus(taskId) {\n            const { apiKey } = API_CONFIG['bigmodelCogVideo']\n            const maxAttempts = 30 // 最大轮询次数\n            const interval = 5000 // 轮询间隔 5 秒\n\n            for (let i = 0; i < maxAttempts; i++) {\n                try {\n                    const response = await fetch(`https://open.bigmodel.cn/api/paas/v4/async-result/${taskId}`, {\n                        method: 'GET',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            Authorization: `Bearer ${apiKey}`\n                        }\n                    })\n\n                    if (!response.ok) {\n                        const errorResponse = await response.json() // 解析错误响应\n                        const errorMessage = errorResponse.error?.message || `HTTP error! Status: ${response.status}`\n                        throw new Error(errorMessage) // 抛出错误信息\n                    }\n\n                    const result = await response.json()\n                    if (result.task_status === 'SUCCESS') {\n                        this.isLoading = false\n                        this.videoUrl = result.video_result[0]?.url\n                        this.coverImageUrl = result.video_result[0]?.cover_image_url\n                        this.imageUrl = null // 清除上传的图片\n                        return\n                    } else if (result.status === 'failed') {\n                        throw new Error('Video generation failed')\n                    }\n                } catch (error) {\n                    console.error('Error polling task status:', error)\n                    alert(error.message) // 弹出错误信息\n                    this.isLoading = false\n                    this.videoUrl = null\n                    this.coverImageUrl = null\n                    this.imageUrl = null\n                    this.inputText = ''\n                    return\n                }\n\n                await new Promise(resolve => setTimeout(resolve, interval))\n            }\n\n            console.error('Task polling timed out')\n        },\n\n        // 上传图片\n        async handleImageUpload(event) {\n            this.generatedContent = null\n            const file = event.target.files[0]\n            if (!file) return\n\n            // 检查文件格式\n            const allowedTypes = ['image/jpg', 'image/jpeg', 'image/png']\n            if (!allowedTypes.includes(file.type)) {\n                alert('仅支持 JPG、JPEG、PNG 格式的图片')\n                return\n            }\n\n            // 检查图片像素（不超过 6000x6000）\n            const img = new Image()\n            img.src = URL.createObjectURL(file)\n            img.onload = async () => {\n                const width = img.width\n                const height = img.height\n                if (width > 6000 || height > 6000) {\n                    alert('图片像素不能超过 6000x6000')\n                    return\n                }\n\n                // 如果图片大小超过 5MB，则进行压缩\n                if (file.size > 5 * 1024 * 1024) {\n                    try {\n                        const compressedFile = await this.compressImage(file)\n                        this.imageUrl = URL.createObjectURL(compressedFile)\n                        this.imageBase64 = await this.fileToBase64(compressedFile)\n                    } catch (error) {\n                        console.error('图片压缩失败:', error)\n                        alert('图片压缩失败，请重试')\n                        return\n                    }\n                } else {\n                    // 图片大小在 5MB 以内，直接处理\n                    const reader = new FileReader()\n                    reader.onload = e => {\n                        this.imageUrl = e.target.result // 用于显示图片\n                        this.imageBase64 = e.target.result.split(',')[1] // 提取 Base64 数据部分\n                    }\n                    reader.readAsDataURL(file)\n                }\n            }\n        },\n\n        // 压缩图片\n        compressImage(file) {\n            return new Promise((resolve, reject) => {\n                const img = new Image()\n                img.src = URL.createObjectURL(file)\n                img.onload = () => {\n                    const canvas = document.createElement('canvas')\n                    const ctx = canvas.getContext('2d')\n\n                    // 设置最大宽度和高度\n                    const maxWidth = 6000\n                    const maxHeight = 6000\n                    let width = img.width\n                    let height = img.height\n\n                    if (width > maxWidth || height > maxHeight) {\n                        const ratio = Math.min(maxWidth / width, maxHeight / height)\n                        width *= ratio\n                        height *= ratio\n                    }\n\n                    canvas.width = width\n                    canvas.height = height\n\n                    // 绘制图片到 canvas\n                    ctx.drawImage(img, 0, 0, width, height)\n\n                    // 将 canvas 转换为 Blob\n                    canvas.toBlob(\n                        blob => {\n                            if (!blob) {\n                                reject(new Error('图片压缩失败'))\n                                return\n                            }\n\n                            // 检查压缩后的文件大小\n                            if (blob.size > 5 * 1024 * 1024) {\n                                // 如果仍然大于 5MB，降低质量\n                                canvas.toBlob(\n                                    newBlob => {\n                                        if (!newBlob) {\n                                            reject(new Error('图片压缩失败'))\n                                            return\n                                        }\n                                        resolve(newBlob)\n                                    },\n                                    file.type,\n                                    0.5 // 降低质量\n                                )\n                            } else {\n                                resolve(blob)\n                            }\n                        },\n                        file.type,\n                        0.8 // 初始质量\n                    )\n                }\n                img.onerror = error => reject(error)\n            })\n        },\n\n        // 将文件转换为 Base64\n        fileToBase64(file) {\n            return new Promise((resolve, reject) => {\n                const reader = new FileReader()\n                reader.onload = e => resolve(e.target.result.split(',')[1])\n                reader.onerror = error => reject(error)\n                reader.readAsDataURL(file)\n            })\n        }\n    }\n}\n</script>\n\n<style scoped>\n.container {\n    margin: 0 auto;\n    padding-bottom: 50px;\n}\ntextarea {\n    outline: none;\n}\n.head-title {\n    font-size: 18px;\n    margin-bottom: 10px;\n}\n.spinner-border {\n    border-width: 4px;\n    border-top-color: #3498db;\n    border-bottom-color: #3498db;\n    border-radius: 50%;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}