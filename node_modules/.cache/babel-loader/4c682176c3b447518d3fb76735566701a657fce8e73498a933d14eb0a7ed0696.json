{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport Message from '../ChatBox/MessageBox.vue';\nimport InputBox from '../ChatBox/InputBox.vue';\nimport { fetchAIResponse, API_CONFIG } from '../../utils/api';\nimport { RolePrompts } from '../../utils/prompt.js';\nimport FooterBox from '../FooterBox.vue';\nexport default {\n  components: {\n    Message,\n    InputBox,\n    FooterBox\n  },\n  data() {\n    return {\n      prompts: RolePrompts,\n      isShareDialogOpen: false,\n      messages: [{\n        role: 'assistant',\n        content: '你好！请问有什么可以帮您的？'\n      }],\n      isThinking: false,\n      mode: 'normal',\n      model: 'gpt35',\n      tab: 'chat',\n      selectedPrompt: null,\n      abortController: null // 用来保存 AbortController 实例\n    };\n  },\n  methods: {\n    changePrompt(data) {\n      this.selectedPrompt = data;\n      this.isShareDialogOpen = true;\n      this.activePrompt = data.description;\n      this.roleImgUrl = data.imgurl || '';\n      this.messages = [{\n        role: 'assistant',\n        content: data.content,\n        name: data.title,\n        presets: data.presets,\n        model: this.model\n      }];\n    },\n    async sendMessage(userInput) {\n      if (userInput.trim() === '') return;\n\n      // 插入用户消息\n      this.messages.push({\n        role: 'user',\n        content: userInput,\n        id: Date.now()\n      });\n\n      // 插入“加载中”临时消息\n      const loadingMessage = {\n        role: 'assistant',\n        content: '思考中',\n        id: 'loading-' + Date.now()\n      };\n      this.messages.push(loadingMessage);\n      this.isThinking = true;\n\n      // 创建新的 AbortController 实例\n      this.abortController = new AbortController();\n      // 获取 AI 响应\n      await this.getAIResponse(loadingMessage.id, this.abortController);\n      this.isThinking = false;\n      this.scrollToBottom();\n    },\n    async getAIResponse(loadingMessageId, controller) {\n      try {\n        const systemMessage = this.activePrompt;\n        const messages = [{\n          role: 'system',\n          content: systemMessage\n        }, ...this.messages.filter(msg => msg.id !== loadingMessageId).map(msg => ({\n          role: msg.role,\n          content: msg.content\n        }))];\n        const {\n          apiUrl,\n          apiKey,\n          modelName,\n          temperature\n        } = this.getApiConfig();\n        let reasoningContent = '';\n        let finalContent = '';\n        let totalTokens = 0;\n        const index = this.messages.findIndex(msg => msg.id === loadingMessageId);\n        if (index !== -1) {\n          this.messages = [...this.messages.slice(0, index), {\n            role: 'assistant',\n            content: '思考中',\n            reasoningContent: '',\n            token: 0,\n            duration: 0,\n            id: this.generateUniqueId(),\n            mode: this.mode,\n            model: this.model\n          }, ...this.messages.slice(index + 1)];\n        }\n        const stream = true;\n        await fetchAIResponse(apiUrl, apiKey, modelName, messages, temperature, stream, chunk => {\n          if (controller.signal.aborted) {\n            return; // 请求被中止，退出\n          }\n          if (chunk.type === 'reasoning') {\n            reasoningContent += chunk.content;\n            totalTokens = parseFloat((totalTokens + chunk.token).toFixed(4));\n            this.messages = [...this.messages.slice(0, index), {\n              ...this.messages[index],\n              reasoningContent,\n              token: totalTokens,\n              duration: chunk.duration\n            }, ...this.messages.slice(index + 1)];\n          } else if (chunk.type === 'content') {\n            finalContent += chunk.content;\n            totalTokens = parseFloat((totalTokens + chunk.token).toFixed(4));\n            this.messages = [...this.messages.slice(0, index), {\n              ...this.messages[index],\n              content: finalContent,\n              token: totalTokens,\n              duration: chunk.duration\n            }, ...this.messages.slice(index + 1)];\n          } else if (chunk.type === 'complete') {\n            this.messages = [...this.messages.slice(0, index), {\n              ...this.messages[index],\n              duration: chunk.duration\n            }, ...this.messages.slice(index + 1)];\n          }\n          this.scrollToBottom();\n        }, controller);\n      } catch (error) {\n        if (error.name !== 'AbortError') {\n          this.messages = [{\n            role: 'assistant',\n            content: '这个模型出现了问题，请换个模型试试！',\n            id: this.generateUniqueId()\n          }];\n        }\n      }\n    },\n    generateUniqueId() {\n      return Date.now().toString(36) + Math.random().toString(36).substring(2);\n    },\n    getApiConfig() {\n      // 直接从配置文件中获取当前模型的配置\n      const config = API_CONFIG[this.model];\n      if (!config) {\n        throw new Error(`未找到模型 ${this.model} 的配置`);\n      }\n      return config;\n    },\n    scrollToBottom() {\n      this.$nextTick(() => {\n        const chatContainer = this.$refs.chatContainer;\n        chatContainer.scrollTop = chatContainer.scrollHeight;\n      });\n    },\n    closeShareDialog() {\n      // 如果有正在进行的请求，取消它\n      if (this.abortController) {\n        this.abortController.abort();\n      }\n      this.isShareDialogOpen = false; // 关闭弹窗\n    },\n    handlePresetClick(preset) {\n      this.$refs.inputBox.roleChange(preset);\n    }\n  }\n};","map":{"version":3,"names":["Message","InputBox","fetchAIResponse","API_CONFIG","RolePrompts","FooterBox","components","data","prompts","isShareDialogOpen","messages","role","content","isThinking","mode","model","tab","selectedPrompt","abortController","methods","changePrompt","activePrompt","description","roleImgUrl","imgurl","name","title","presets","sendMessage","userInput","trim","push","id","Date","now","loadingMessage","AbortController","getAIResponse","scrollToBottom","loadingMessageId","controller","systemMessage","filter","msg","map","apiUrl","apiKey","modelName","temperature","getApiConfig","reasoningContent","finalContent","totalTokens","index","findIndex","slice","token","duration","generateUniqueId","stream","chunk","signal","aborted","type","parseFloat","toFixed","error","toString","Math","random","substring","config","Error","$nextTick","chatContainer","$refs","scrollTop","scrollHeight","closeShareDialog","abort","handlePresetClick","preset","inputBox","roleChange"],"sources":["src/components/RoleBox/RoleList.vue"],"sourcesContent":["<template>\n    <div class=\"container mx-auto pl-4 pr-4\">\n        <div class=\"grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 gap-4 pb-10\">\n            <article class=\"rounded-xl border-2 border-gray-100 bg-white prompts\" v-for=\"(prompt, index) in prompts\" :key=\"index\" @click=\"changePrompt(prompt)\">\n                <div class=\"flex items-start gap-4 p-2 sm:p-4\">\n                    <div>\n                        <h3 class=\"font-medium sm:text-md\">\n                            <a href=\"javascript:;\" class=\"hover:underline\">{{ prompt.title }}</a>\n                        </h3>\n\n                        <p class=\"line-clamp-2 text-sm text-gray-400\">\n                            {{ prompt.content }}\n                        </p>\n                    </div>\n                </div>\n\n                <div class=\"flex justify-end hidden\">\n                    <strong class=\"-mb-[2px] -me-[2px] inline-flex items-center gap-1 rounded-ee-xl rounded-ss-xl bg-green-600 bg-opacity-80 px-3 py-1.5 text-white\">\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"size-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n                            <path\n                                stroke-linecap=\"round\"\n                                stroke-linejoin=\"round\"\n                                d=\"M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z\"\n                            />\n                        </svg>\n                        <span class=\"text-[10px] font-medium sm:text-xs\">Free</span>\n                    </strong>\n                </div>\n            </article>\n        </div>\n\n        <div v-if=\"isShareDialogOpen\" class=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50\">\n            <!-- 全屏弹窗容器 -->\n            <div class=\"fixed inset-0 bg-white shadow-lg flex flex-col\">\n                <!-- 弹窗内容 -->\n                <div>\n                    <div class=\"main min-h-screen flex flex-col absolute inset-0 -z-10 h-full w-full bg-main\">\n                        <h2 class=\"text-1xl font-bold mb-2 mt-2 text-center\">\n                            {{ selectedPrompt.title }}\n                            <!-- 关闭按钮 -->\n                            <button @click=\"closeShareDialog\" class=\"absolute right-4 text-gray-600 hover:text-gray-900 focus:outline-none\">\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n                                </svg>\n                            </button>\n                        </h2>\n                        <!-- 聊天记录区域 -->\n                        <div ref=\"chatContainer\" class=\"flex-1 p-4 overflow-y-auto pb-2 chatContainer\">\n                            <!-- 消息列表 -->\n                            <Message\n                                v-for=\"message in messages\"\n                                :key=\"message.id\"\n                                :message=\"message\"\n                                :name=\"selectedPrompt.title\"\n                                @preset-click=\"handlePresetClick\"\n                                :showName=\"false\"\n                                :roleImgUrl=\"roleImgUrl\"\n                            />\n                        </div>\n\n                        <!-- 输入框区域 -->\n                        <InputBox\n                            ref=\"inputBox\"\n                            :is-thinking=\"isThinking\"\n                            :showMode=\"false\"\n                            :mode=\"mode\"\n                            :model=\"model\"\n                            @send-message=\"sendMessage\"\n                            @scroll-to-bottom=\"scrollToBottom\"\n                        />\n                    </div>\n                    <!-- 底部介绍 -->\n                    <FooterBox />\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport Message from '../ChatBox/MessageBox.vue'\nimport InputBox from '../ChatBox/InputBox.vue'\nimport { fetchAIResponse, API_CONFIG } from '../../utils/api'\nimport { RolePrompts } from '../../utils/prompt.js'\n\nimport FooterBox from '../FooterBox.vue'\nexport default {\n    components: {\n        Message,\n        InputBox,\n        FooterBox\n    },\n    data() {\n        return {\n            prompts: RolePrompts,\n            isShareDialogOpen: false,\n            messages: [\n                {\n                    role: 'assistant',\n                    content: '你好！请问有什么可以帮您的？'\n                }\n            ],\n            isThinking: false,\n            mode: 'normal',\n            model: 'gpt35',\n            tab: 'chat',\n            selectedPrompt: null,\n            abortController: null // 用来保存 AbortController 实例\n        }\n    },\n    methods: {\n        changePrompt(data) {\n            this.selectedPrompt = data\n            this.isShareDialogOpen = true\n            this.activePrompt = data.description\n            this.roleImgUrl = data.imgurl || ''\n            this.messages = [\n                {\n                    role: 'assistant',\n                    content: data.content,\n                    name: data.title,\n                    presets: data.presets,\n                    model: this.model\n                }\n            ]\n        },\n        async sendMessage(userInput) {\n            if (userInput.trim() === '') return\n\n            // 插入用户消息\n            this.messages.push({\n                role: 'user',\n                content: userInput,\n                id: Date.now()\n            })\n\n            // 插入“加载中”临时消息\n            const loadingMessage = {\n                role: 'assistant',\n                content: '思考中',\n                id: 'loading-' + Date.now()\n            }\n            this.messages.push(loadingMessage)\n\n            this.isThinking = true\n\n            // 创建新的 AbortController 实例\n            this.abortController = new AbortController()\n            // 获取 AI 响应\n            await this.getAIResponse(loadingMessage.id, this.abortController)\n\n            this.isThinking = false\n\n            this.scrollToBottom()\n        },\n        async getAIResponse(loadingMessageId, controller) {\n            try {\n                const systemMessage = this.activePrompt\n                const messages = [\n                    { role: 'system', content: systemMessage },\n                    ...this.messages.filter(msg => msg.id !== loadingMessageId).map(msg => ({ role: msg.role, content: msg.content }))\n                ]\n\n                const { apiUrl, apiKey, modelName, temperature } = this.getApiConfig()\n\n                let reasoningContent = ''\n                let finalContent = ''\n                let totalTokens = 0\n\n                const index = this.messages.findIndex(msg => msg.id === loadingMessageId)\n                if (index !== -1) {\n                    this.messages = [\n                        ...this.messages.slice(0, index),\n                        {\n                            role: 'assistant',\n                            content: '思考中',\n                            reasoningContent: '',\n                            token: 0,\n                            duration: 0,\n                            id: this.generateUniqueId(),\n                            mode: this.mode,\n                            model: this.model\n                        },\n                        ...this.messages.slice(index + 1)\n                    ]\n                }\n\n                const stream = true\n                await fetchAIResponse(\n                    apiUrl,\n                    apiKey,\n                    modelName,\n                    messages,\n                    temperature,\n                    stream,\n                    chunk => {\n                        if (controller.signal.aborted) {\n                            return // 请求被中止，退出\n                        }\n\n                        if (chunk.type === 'reasoning') {\n                            reasoningContent += chunk.content\n                            totalTokens = parseFloat((totalTokens + chunk.token).toFixed(4))\n                            this.messages = [\n                                ...this.messages.slice(0, index),\n                                { ...this.messages[index], reasoningContent, token: totalTokens, duration: chunk.duration },\n                                ...this.messages.slice(index + 1)\n                            ]\n                        } else if (chunk.type === 'content') {\n                            finalContent += chunk.content\n                            totalTokens = parseFloat((totalTokens + chunk.token).toFixed(4))\n                            this.messages = [\n                                ...this.messages.slice(0, index),\n                                { ...this.messages[index], content: finalContent, token: totalTokens, duration: chunk.duration },\n                                ...this.messages.slice(index + 1)\n                            ]\n                        } else if (chunk.type === 'complete') {\n                            this.messages = [...this.messages.slice(0, index), { ...this.messages[index], duration: chunk.duration }, ...this.messages.slice(index + 1)]\n                        }\n                        this.scrollToBottom()\n                    },\n                    controller\n                )\n            } catch (error) {\n                if (error.name !== 'AbortError') {\n                    this.messages = [{ role: 'assistant', content: '这个模型出现了问题，请换个模型试试！', id: this.generateUniqueId() }]\n                }\n            }\n        },\n        generateUniqueId() {\n            return Date.now().toString(36) + Math.random().toString(36).substring(2)\n        },\n        getApiConfig() {\n            // 直接从配置文件中获取当前模型的配置\n            const config = API_CONFIG[this.model]\n            if (!config) {\n                throw new Error(`未找到模型 ${this.model} 的配置`)\n            }\n            return config\n        },\n\n        scrollToBottom() {\n            this.$nextTick(() => {\n                const chatContainer = this.$refs.chatContainer\n                chatContainer.scrollTop = chatContainer.scrollHeight\n            })\n        },\n        closeShareDialog() {\n            // 如果有正在进行的请求，取消它\n            if (this.abortController) {\n                this.abortController.abort()\n            }\n            this.isShareDialogOpen = false // 关闭弹窗\n        },\n        handlePresetClick(preset) {\n            this.$refs.inputBox.roleChange(preset)\n        }\n    }\n}\n</script>\n\n<style scoped>\n.prompts {\n    cursor: pointer;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}