{"ast":null,"code":"import { marked } from 'marked'; // 引入 marked\nimport { splitMixedContent, isCode } from '../../utils/helpers';\nimport IconAI from '../IconBox/IconAI.vue';\nimport CodeBlock from '../CodeBlock.vue'; // 引入 CodeBlock 组件\n\nimport { API_CONFIG } from '../../utils/api';\nexport default {\n  components: {\n    IconAI,\n    CodeBlock\n  },\n  props: {\n    message: {\n      type: Object,\n      required: true\n    },\n    name: {\n      type: String,\n      required: false\n    },\n    showName: {\n      type: Boolean,\n      default: true\n    },\n    roleImgUrl: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      showCopyButton: false,\n      // 控制复制按钮的显示\n      isReasoningExpanded: !!this.message.reasoningContent,\n      // 默认展开（如果 reasoningContent 存在）\n      config: API_CONFIG\n    };\n  },\n  watch: {\n    'message.reasoningContent': {\n      handler(newVal) {\n        if (newVal) {\n          this.isReasoningExpanded = true; // 有内容时自动展开\n        }\n      },\n      immediate: true // 立即触发监听\n    }\n  },\n  computed: {\n    messageClass() {\n      return this.message.role === 'user' ? 'flex justify-end items-start gap-3' : 'flex justify-start items-start gap-3';\n    },\n    bubbleClass() {\n      return this.message.role === 'user' ? 'bg-blue-500 text-white rounded-lg p-3 ' : 'bg-gray-200 text-gray-800 rounded-lg p-3 ';\n    },\n    nameClass() {\n      return this.message.role === 'user' ? 'text-right text-blue-500' : 'text-left text-gray-600';\n    }\n  },\n  methods: {\n    isCode,\n    handlePresetClick(preset) {\n      this.$emit('preset-click', preset);\n    },\n    handleCopy() {\n      const content = this.message.content;\n      if (navigator.clipboard) {\n        navigator.clipboard.writeText(content).then(() => {\n          console.log('内容已复制到剪贴板！');\n        }).catch(() => {\n          this.fallbackCopyText(content);\n        });\n      } else {\n        this.fallbackCopyText(content);\n      }\n    },\n    fallbackCopyText(text) {\n      const textArea = document.createElement('textarea');\n      textArea.value = text;\n      textArea.style.position = 'fixed';\n      document.body.appendChild(textArea);\n      textArea.focus();\n      textArea.select();\n      try {\n        const successful = document.execCommand('copy');\n        if (successful) {\n          console.log('内容已复制到剪贴板！');\n        } else {\n          console.log('复制失败，请手动复制。');\n        }\n      } catch (err) {\n        console.log('复制失败，请手动复制。');\n      }\n      document.body.removeChild(textArea);\n    },\n    toggleReasoning() {\n      this.isReasoningExpanded = !this.isReasoningExpanded;\n    },\n    // 解析 Markdown 内容\n    renderMarkdown(content) {\n      return marked.parse(content); // 使用 marked 解析 Markdown\n    },\n    // 检测代码语言\n    detectLanguage(content) {\n      if (content.startsWith('```')) {\n        const language = content.split('\\n')[0].replace(/```/, '').trim();\n        return language || 'javascript';\n      }\n      return 'javascript';\n    },\n    // 拆分混合内容\n    splitMixedContent(content) {\n      return splitMixedContent(content);\n    },\n    // HTML 实体编码函数\n    escapeHtml(text) {\n      const map = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#039;'\n      };\n      return text.replace(/[&<>\"']/g, function (m) {\n        return map[m];\n      });\n    }\n  }\n};","map":{"version":3,"names":["marked","splitMixedContent","isCode","IconAI","CodeBlock","API_CONFIG","components","props","message","type","Object","required","name","String","showName","Boolean","default","roleImgUrl","data","showCopyButton","isReasoningExpanded","reasoningContent","config","watch","handler","newVal","immediate","computed","messageClass","role","bubbleClass","nameClass","methods","handlePresetClick","preset","$emit","handleCopy","content","navigator","clipboard","writeText","then","console","log","catch","fallbackCopyText","text","textArea","document","createElement","value","style","position","body","appendChild","focus","select","successful","execCommand","err","removeChild","toggleReasoning","renderMarkdown","parse","detectLanguage","startsWith","language","split","replace","trim","escapeHtml","map","m"],"sources":["src/components/ChatBox/MessageBox.vue"],"sourcesContent":["<template>\n    <div class=\"mb-4\">\n        <div :class=\"messageClass\">\n            <div v-if=\"message.role === 'assistant'\" class=\"w-10 h-10 flex items-center justify-center rounded-full\">\n                <img class=\"w-full h-full object-cover rounded-full\" v-if=\"roleImgUrl\" :src=\"roleImgUrl\" />\n                <IconAI v-else :model=\"message.model\" />\n            </div>\n            <div class=\"flex flex-col relative\" style=\"max-width: calc(100% - 50px)\">\n                <span v-if=\"message.role === 'assistant' && message.model === 'deepseek' && !name\" class=\"text-sm font-medium mb-1\" :class=\"nameClass\">\n                    <span v-if=\"message.model && showName\" class=\"text-sm font-medium mb-1\" :class=\"nameClass\">\n                        {{ config[message.model].name }}\n                    </span>\n                    {{ message.mode === 'normal' ? '😊' : message.mode === 'angry' ? '😡' : message.mode === 'rude' ? '🤬' : '' }}\n                </span>\n\n                <span v-else-if=\"message.model && showName\" class=\"text-sm font-medium mb-1\" :class=\"nameClass\">\n                    {{ config[message.model].name }}\n                </span>\n                <!-- 可折叠的思维链内容 -->\n                <div v-if=\"message.reasoningContent\" class=\"bg-gray-100 p-3 rounded-lg mb-2 text-sm text-gray-700\">\n                    <div class=\"flex items-center justify-between cursor-pointer\" @click=\"toggleReasoning\">\n                        <span class=\"font-medium\">深度思考（{{ message.reasoningDuration }}秒）</span>\n                        <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            class=\"h-4 w-4 transition-transform duration-200\"\n                            :class=\"{ 'transform rotate-180': isReasoningExpanded }\"\n                            fill=\"none\"\n                            viewBox=\"0 0 24 24\"\n                            stroke=\"currentColor\"\n                        >\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 9l-7 7-7-7\" />\n                        </svg>\n                    </div>\n                    <div v-if=\"isReasoningExpanded\" class=\"mt-2\">\n                        <pre class=\"whitespace-pre-wrap\">{{ message.reasoningContent }}</pre>\n                    </div>\n                </div>\n\n                <!-- 最终回答内容 -->\n                <div :class=\"bubbleClass\" class=\"relative group text-sm\" @mouseenter=\"showCopyButton = true\" @mouseleave=\"showCopyButton = false\">\n                    <!-- 拆分混合内容并分别渲染 -->\n                    <div v-for=\"(part, index) in splitMixedContent(message.content)\" :key=\"index\">\n                        <!-- 如果是代码，使用 CodeBlock 组件 -->\n                        <CodeBlock v-if=\"part.type === 'code'\" :code=\"part.content\" :language=\"detectLanguage(part.content)\" />\n                        <!-- 否则解析为 Markdown -->\n                        <div v-else v-html=\"renderMarkdown(escapeHtml(part.content))\" class=\"markdown-content\"></div>\n                    </div>\n                    <!-- 复制按钮 -->\n                    <button\n                        v-if=\"showCopyButton\"\n                        @click=\"handleCopy\"\n                        class=\"absolute -top-2 -right-2 p-[3px] bg-white border border-gray-200 rounded-full shadow-sm hover:bg-gray-100 transition-colors duration-200\"\n                    >\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-4 w-4 text-gray-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path\n                                stroke-linecap=\"round\"\n                                stroke-linejoin=\"round\"\n                                stroke-width=\"2\"\n                                d=\"M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z\"\n                            />\n                        </svg>\n                    </button>\n                </div>\n\n                <div>\n                    <p\n                        v-for=\"(presets, index) in message.presets\"\n                        :key=\"index\"\n                        class=\"preset-item cursor-pointer hover:bg-gray-100 p-2 rounded-lg transition-colors duration-200 border border-gray-300\"\n                        @click=\"handlePresetClick(presets)\"\n                    >\n                        {{ presets }}\n                    </p>\n                </div>\n            </div>\n        </div>\n        <p class=\"w-full ml-[52px] text-xs text-gray-500 mt-1\" v-if=\"message.token\" style=\"width: 60%; overflow: hidden\">\n            <span style=\"float: left\">{{ message.duration }}s</span>\n            <span style=\"background: #888d92; display: block; height: 8px; margin: 4px 8px; width: 1px; float: left\"></span>\n            <span style=\"float: left\">{{ message.token }}Token</span>\n        </p>\n    </div>\n</template>\n\n<script>\nimport { marked } from 'marked' // 引入 marked\nimport { splitMixedContent, isCode } from '../../utils/helpers'\nimport IconAI from '../IconBox/IconAI.vue'\nimport CodeBlock from '../CodeBlock.vue' // 引入 CodeBlock 组件\n\nimport { API_CONFIG } from '../../utils/api'\nexport default {\n    components: {\n        IconAI,\n        CodeBlock\n    },\n    props: {\n        message: {\n            type: Object,\n            required: true\n        },\n        name: {\n            type: String,\n            required: false\n        },\n        showName: {\n            type: Boolean,\n            default: true\n        },\n        roleImgUrl: {\n            type: String,\n            default: ''\n        }\n    },\n    data() {\n        return {\n            showCopyButton: false, // 控制复制按钮的显示\n            isReasoningExpanded: !!this.message.reasoningContent, // 默认展开（如果 reasoningContent 存在）\n            config: API_CONFIG\n        }\n    },\n    watch: {\n        'message.reasoningContent': {\n            handler(newVal) {\n                if (newVal) {\n                    this.isReasoningExpanded = true // 有内容时自动展开\n                }\n            },\n            immediate: true // 立即触发监听\n        }\n    },\n    computed: {\n        messageClass() {\n            return this.message.role === 'user' ? 'flex justify-end items-start gap-3' : 'flex justify-start items-start gap-3'\n        },\n        bubbleClass() {\n            return this.message.role === 'user' ? 'bg-blue-500 text-white rounded-lg p-3 ' : 'bg-gray-200 text-gray-800 rounded-lg p-3 '\n        },\n        nameClass() {\n            return this.message.role === 'user' ? 'text-right text-blue-500' : 'text-left text-gray-600'\n        }\n    },\n    methods: {\n        isCode,\n        handlePresetClick(preset) {\n            this.$emit('preset-click', preset)\n        },\n        handleCopy() {\n            const content = this.message.content\n            if (navigator.clipboard) {\n                navigator.clipboard\n                    .writeText(content)\n                    .then(() => {\n                        console.log('内容已复制到剪贴板！')\n                    })\n                    .catch(() => {\n                        this.fallbackCopyText(content)\n                    })\n            } else {\n                this.fallbackCopyText(content)\n            }\n        },\n        fallbackCopyText(text) {\n            const textArea = document.createElement('textarea')\n            textArea.value = text\n            textArea.style.position = 'fixed'\n            document.body.appendChild(textArea)\n            textArea.focus()\n            textArea.select()\n\n            try {\n                const successful = document.execCommand('copy')\n                if (successful) {\n                    console.log('内容已复制到剪贴板！')\n                } else {\n                    console.log('复制失败，请手动复制。')\n                }\n            } catch (err) {\n                console.log('复制失败，请手动复制。')\n            }\n\n            document.body.removeChild(textArea)\n        },\n        toggleReasoning() {\n            this.isReasoningExpanded = !this.isReasoningExpanded\n        },\n        // 解析 Markdown 内容\n        renderMarkdown(content) {\n            return marked.parse(content) // 使用 marked 解析 Markdown\n        },\n        // 检测代码语言\n        detectLanguage(content) {\n            if (content.startsWith('```')) {\n                const language = content.split('\\n')[0].replace(/```/, '').trim()\n                return language || 'javascript'\n            }\n            return 'javascript'\n        },\n        // 拆分混合内容\n        splitMixedContent(content) {\n            return splitMixedContent(content)\n        },\n        // HTML 实体编码函数\n        escapeHtml(text) {\n            const map = {\n                '&': '&amp;',\n                '<': '&lt;',\n                '>': '&gt;',\n                '\"': '&quot;',\n                \"'\": '&#039;'\n            }\n\n            return text.replace(/[&<>\"']/g, function (m) {\n                return map[m]\n            })\n        }\n    }\n}\n</script>\n<style scoped>\n.preset-item {\n    margin: 4px 0;\n    color: #4a5568; /* 预设文本颜色 */\n    font-size: 0.875rem; /* 预设文本大小 */\n    border: 1px solid #e2e8f0; /* 边框颜色 */\n}\n\n.preset-item:hover {\n    background-color: #f7fafc; /* 悬停背景色 */\n    border-color: #cbd5e0; /* 悬停时边框颜色加深 */\n}\n</style>\n"],"mappings":"AAqFA,SAAAA,MAAA;AACA,SAAAC,iBAAA,EAAAC,MAAA;AACA,OAAAC,MAAA;AACA,OAAAC,SAAA;;AAEA,SAAAC,UAAA;AACA;EACAC,UAAA;IACAH,MAAA;IACAC;EACA;EACAG,KAAA;IACAC,OAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,QAAA;IACA;IACAC,IAAA;MACAH,IAAA,EAAAI,MAAA;MACAF,QAAA;IACA;IACAG,QAAA;MACAL,IAAA,EAAAM,OAAA;MACAC,OAAA;IACA;IACAC,UAAA;MACAR,IAAA,EAAAI,MAAA;MACAG,OAAA;IACA;EACA;EACAE,KAAA;IACA;MACAC,cAAA;MAAA;MACAC,mBAAA,SAAAZ,OAAA,CAAAa,gBAAA;MAAA;MACAC,MAAA,EAAAjB;IACA;EACA;EACAkB,KAAA;IACA;MACAC,QAAAC,MAAA;QACA,IAAAA,MAAA;UACA,KAAAL,mBAAA;QACA;MACA;MACAM,SAAA;IACA;EACA;EACAC,QAAA;IACAC,aAAA;MACA,YAAApB,OAAA,CAAAqB,IAAA;IACA;IACAC,YAAA;MACA,YAAAtB,OAAA,CAAAqB,IAAA;IACA;IACAE,UAAA;MACA,YAAAvB,OAAA,CAAAqB,IAAA;IACA;EACA;EACAG,OAAA;IACA9B,MAAA;IACA+B,kBAAAC,MAAA;MACA,KAAAC,KAAA,iBAAAD,MAAA;IACA;IACAE,WAAA;MACA,MAAAC,OAAA,QAAA7B,OAAA,CAAA6B,OAAA;MACA,IAAAC,SAAA,CAAAC,SAAA;QACAD,SAAA,CAAAC,SAAA,CACAC,SAAA,CAAAH,OAAA,EACAI,IAAA;UACAC,OAAA,CAAAC,GAAA;QACA,GACAC,KAAA;UACA,KAAAC,gBAAA,CAAAR,OAAA;QACA;MACA;QACA,KAAAQ,gBAAA,CAAAR,OAAA;MACA;IACA;IACAQ,iBAAAC,IAAA;MACA,MAAAC,QAAA,GAAAC,QAAA,CAAAC,aAAA;MACAF,QAAA,CAAAG,KAAA,GAAAJ,IAAA;MACAC,QAAA,CAAAI,KAAA,CAAAC,QAAA;MACAJ,QAAA,CAAAK,IAAA,CAAAC,WAAA,CAAAP,QAAA;MACAA,QAAA,CAAAQ,KAAA;MACAR,QAAA,CAAAS,MAAA;MAEA;QACA,MAAAC,UAAA,GAAAT,QAAA,CAAAU,WAAA;QACA,IAAAD,UAAA;UACAf,OAAA,CAAAC,GAAA;QACA;UACAD,OAAA,CAAAC,GAAA;QACA;MACA,SAAAgB,GAAA;QACAjB,OAAA,CAAAC,GAAA;MACA;MAEAK,QAAA,CAAAK,IAAA,CAAAO,WAAA,CAAAb,QAAA;IACA;IACAc,gBAAA;MACA,KAAAzC,mBAAA,SAAAA,mBAAA;IACA;IACA;IACA0C,eAAAzB,OAAA;MACA,OAAArC,MAAA,CAAA+D,KAAA,CAAA1B,OAAA;IACA;IACA;IACA2B,eAAA3B,OAAA;MACA,IAAAA,OAAA,CAAA4B,UAAA;QACA,MAAAC,QAAA,GAAA7B,OAAA,CAAA8B,KAAA,UAAAC,OAAA,YAAAC,IAAA;QACA,OAAAH,QAAA;MACA;MACA;IACA;IACA;IACAjE,kBAAAoC,OAAA;MACA,OAAApC,iBAAA,CAAAoC,OAAA;IACA;IACA;IACAiC,WAAAxB,IAAA;MACA,MAAAyB,GAAA;QACA;QACA;QACA;QACA;QACA;MACA;MAEA,OAAAzB,IAAA,CAAAsB,OAAA,uBAAAI,CAAA;QACA,OAAAD,GAAA,CAAAC,CAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}