{"ast":null,"code":"import { API_CONFIG } from '../../utils/api';\nimport IconGlm from '../IconBox/IconGlm.vue';\nexport default {\n  components: {\n    IconGlm\n  },\n  data() {\n    return {\n      inputText: '',\n      videoUrl: '',\n      coverImageUrl: '',\n      isLoading: false,\n      disabled: false,\n      inputTip: ''\n    };\n  },\n  methods: {\n    async optimizeInput() {\n      if (!this.inputText) return;\n      this.isLoading = true;\n      try {\n        this.inputTip = '提示词优化中，请稍后！';\n        const optimizedPrompt = await this.optimizePrompt(this.inputText);\n        if (optimizedPrompt) {\n          this.inputText = optimizedPrompt;\n        }\n      } catch (error) {\n        console.error('Error optimizing prompt:', error);\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    async submitData() {\n      if (!this.inputText) return;\n\n      // 直接生成视频\n      const {\n        apiUrl,\n        apiKey,\n        modelName\n      } = API_CONFIG['bigmodelCogVideo'];\n      const fullPrompt = `${this.inputText}`;\n\n      // 生成视频并轮询任务状态\n      const taskId = await this.generateVideo(apiUrl, apiKey, modelName, fullPrompt);\n      if (taskId) {\n        await this.pollTaskStatus(taskId);\n      }\n    },\n    async optimizePrompt(userInput) {\n      try {\n        const {\n          apiUrl,\n          apiKey,\n          modelName\n        } = API_CONFIG['bigmodel'];\n        const requestBody = {\n          model: modelName,\n          stream: false,\n          temperature: 0.8,\n          messages: [{\n            role: 'system',\n            content: `你是一名提示词优化助手，请将用户的白话描述转换为适合生成视频的详细提示词。要求：\n\n1. 保留核心人物、环境、动作及情感细节，准确传达故事主旨；\n2. 添加适合视频生成的画面描述，包括光线、色彩、动作、镜头角度、背景和氛围等；\n3. 确保简洁明了，突出视频的关键元素，使其不超过 150 字。\n\n### 示例：\n**用户描述**：我梦到被一群猫追逐。\n**优化后的提示词**：\"镜头从低处逐渐拉远，拍摄一名人物在昏暗的街道上奔跑（人物描述）。周围是一群猫（主体描述），它们的眼睛在微弱的路灯下闪烁，步伐轻盈且迅速。画面带有轻微的晃动，增强紧张感，猫群的快速移动在镜头前形成模糊的影像。背景色调偏冷，夜晚的空气中弥漫着神秘感，人物的脸上充满恐慌。\"\n`\n          }, {\n            role: 'user',\n            content: `${userInput}`\n          }]\n        };\n        const response = await fetch(apiUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${apiKey}`\n          },\n          body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const result = await response.json();\n        return result.choices[0].message.content || '';\n      } catch (error) {\n        console.error('Error optimizing prompt:', error);\n        return null;\n      }\n    },\n    async generateVideo(apiUrl, apiKey, modelName, prompt) {\n      this.inputTip = '生成中，请不要退出页面！';\n      this.isLoading = true;\n      this.videoUrl = null;\n      try {\n        const requestBody = {\n          model: modelName,\n          prompt,\n          with_audio: true\n        };\n        const response = await fetch(apiUrl, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${apiKey}`\n          },\n          body: JSON.stringify(requestBody)\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const result = await response.json();\n        return result.id; // 假设返回的任务 ID 字段为 task_id\n      } catch (error) {\n        console.error('Error generating video:', error);\n        return null;\n      }\n    },\n    async pollTaskStatus(taskId) {\n      const {\n        apiKey\n      } = API_CONFIG['bigmodelCogVideo'];\n      const maxAttempts = 30; // 最大轮询次数\n      const interval = 5000; // 轮询间隔 5 秒\n\n      for (let i = 0; i < maxAttempts; i++) {\n        try {\n          const response = await fetch(`https://open.bigmodel.cn/api/paas/v4/async-result/${taskId}`, {\n            method: 'GET',\n            headers: {\n              'Content-Type': 'application/json',\n              Authorization: `Bearer ${apiKey}`\n            }\n          });\n          if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n          }\n          const result = await response.json();\n          if (result.task_status === 'SUCCESS') {\n            this.isLoading = false;\n            this.videoUrl = result.video_result[0]?.url;\n            this.coverImageUrl = result.video_result[0]?.cover_image_url;\n            return;\n          } else if (result.status === 'failed') {\n            throw new Error('Video generation failed');\n          }\n        } catch (error) {\n          console.error('Error polling task status:', error);\n          return;\n        }\n        await new Promise(resolve => setTimeout(resolve, interval));\n      }\n      console.error('Task polling timed out');\n    }\n  },\n  mounted() {}\n};","map":{"version":3,"names":["API_CONFIG","IconGlm","components","data","inputText","videoUrl","coverImageUrl","isLoading","disabled","inputTip","methods","optimizeInput","optimizedPrompt","optimizePrompt","error","console","submitData","apiUrl","apiKey","modelName","fullPrompt","taskId","generateVideo","pollTaskStatus","userInput","requestBody","model","stream","temperature","messages","role","content","response","fetch","method","headers","Authorization","body","JSON","stringify","ok","Error","status","result","json","choices","message","prompt","with_audio","id","maxAttempts","interval","i","task_status","video_result","url","cover_image_url","Promise","resolve","setTimeout","mounted"],"sources":["src/components/ImgBox/VideoGlm.vue"],"sourcesContent":["<template>\n    <div class=\"container mx-auto pl-4 pr-4\">\n        <div class=\"flex flex-col lg:flex-row lg:gap-8 lg:mt-10\">\n            <!-- 视频展示区域 -->\n            <div class=\"w-full aspect-[4/3] mb-4 rounded-md overflow-hidden lg:w-1/2 lg:mb-0\">\n                <video :src=\"videoUrl\" :poster=\"coverImageUrl\" controls class=\"w-full h-full object-cover\" v-if=\"videoUrl\"></video>\n                <div class=\"w-full h-full bg-gray-100 flex items-center justify-center\" v-else>\n                    <IconGlm />\n                </div>\n            </div>\n\n            <div class=\"w-full lg:w-1/2 flex flex-col justify-between\">\n                <div>\n                    <div class=\"relative\">\n                        <label for=\"inputText\" class=\"text-sm font-semibold\"\n                            >AI梦境生成器\n\n                            <a href=\"javascript:void(0)\" class=\"text-blue-500 cursor-pointer float-right\" @click=\"optimizeInput\">优化提示词</a>\n                        </label>\n                        <textarea\n                            v-model=\"inputText\"\n                            :disabled=\"disabled\"\n                            class=\"text-sm w-full h-[120px] p-2 text-lg border rounded-md focus:ring-2 mb-4 mt-2\"\n                            placeholder=\"请输入梦境描述，详细描绘梦中的场景、人物、情感和细节，越具体越能还原出真实的梦境画面！\"\n                        ></textarea>\n                    </div>\n                </div>\n                <button\n                    @click=\"submitData\"\n                    class=\"text-sm w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-all\"\n                    :disabled=\"!inputText || isLoading\"\n                >\n                    {{ isLoading ? inputTip : '开始创作' }}\n                </button>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { API_CONFIG } from '../../utils/api'\nimport IconGlm from '../IconBox/IconGlm.vue'\n\nexport default {\n    components: {\n        IconGlm\n    },\n    data() {\n        return {\n            inputText: '',\n            videoUrl: '',\n            coverImageUrl: '',\n            isLoading: false,\n            disabled: false,\n            inputTip: ''\n        }\n    },\n    methods: {\n        async optimizeInput() {\n            if (!this.inputText) return\n\n            this.isLoading = true\n            try {\n                this.inputTip = '提示词优化中，请稍后！'\n                const optimizedPrompt = await this.optimizePrompt(this.inputText)\n                if (optimizedPrompt) {\n                    this.inputText = optimizedPrompt\n                }\n            } catch (error) {\n                console.error('Error optimizing prompt:', error)\n            } finally {\n                this.isLoading = false\n            }\n        },\n        async submitData() {\n            if (!this.inputText) return\n\n            // 直接生成视频\n            const { apiUrl, apiKey, modelName } = API_CONFIG['bigmodelCogVideo']\n            const fullPrompt = `${this.inputText}`\n\n            // 生成视频并轮询任务状态\n            const taskId = await this.generateVideo(apiUrl, apiKey, modelName, fullPrompt)\n            if (taskId) {\n                await this.pollTaskStatus(taskId)\n            }\n        },\n        async optimizePrompt(userInput) {\n            try {\n                const { apiUrl, apiKey, modelName } = API_CONFIG['bigmodel']\n                const requestBody = {\n                    model: modelName,\n                    stream: false,\n                    temperature: 0.8,\n                    messages: [\n                        {\n                            role: 'system',\n                            content: `你是一名提示词优化助手，请将用户的白话描述转换为适合生成视频的详细提示词。要求：\n\n1. 保留核心人物、环境、动作及情感细节，准确传达故事主旨；\n2. 添加适合视频生成的画面描述，包括光线、色彩、动作、镜头角度、背景和氛围等；\n3. 确保简洁明了，突出视频的关键元素，使其不超过 150 字。\n\n### 示例：\n**用户描述**：我梦到被一群猫追逐。\n**优化后的提示词**：\"镜头从低处逐渐拉远，拍摄一名人物在昏暗的街道上奔跑（人物描述）。周围是一群猫（主体描述），它们的眼睛在微弱的路灯下闪烁，步伐轻盈且迅速。画面带有轻微的晃动，增强紧张感，猫群的快速移动在镜头前形成模糊的影像。背景色调偏冷，夜晚的空气中弥漫着神秘感，人物的脸上充满恐慌。\"\n`\n                        },\n                        { role: 'user', content: `${userInput}` }\n                    ]\n                }\n                const response = await fetch(apiUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${apiKey}`\n                    },\n                    body: JSON.stringify(requestBody)\n                })\n\n                if (!response.ok) {\n                    throw new Error(`HTTP error! Status: ${response.status}`)\n                }\n\n                const result = await response.json()\n                return result.choices[0].message.content || ''\n            } catch (error) {\n                console.error('Error optimizing prompt:', error)\n                return null\n            }\n        },\n        async generateVideo(apiUrl, apiKey, modelName, prompt) {\n            this.inputTip = '生成中，请不要退出页面！'\n            this.isLoading = true\n            this.videoUrl = null\n            try {\n                const requestBody = {\n                    model: modelName,\n                    prompt,\n                    with_audio: true\n                }\n                const response = await fetch(apiUrl, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        Authorization: `Bearer ${apiKey}`\n                    },\n                    body: JSON.stringify(requestBody)\n                })\n\n                if (!response.ok) {\n                    throw new Error(`HTTP error! Status: ${response.status}`)\n                }\n\n                const result = await response.json()\n\n                return result.id // 假设返回的任务 ID 字段为 task_id\n            } catch (error) {\n                console.error('Error generating video:', error)\n                return null\n            }\n        },\n        async pollTaskStatus(taskId) {\n            const { apiKey } = API_CONFIG['bigmodelCogVideo']\n            const maxAttempts = 30 // 最大轮询次数\n            const interval = 5000 // 轮询间隔 5 秒\n\n            for (let i = 0; i < maxAttempts; i++) {\n                try {\n                    const response = await fetch(`https://open.bigmodel.cn/api/paas/v4/async-result/${taskId}`, {\n                        method: 'GET',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            Authorization: `Bearer ${apiKey}`\n                        }\n                    })\n\n                    if (!response.ok) {\n                        throw new Error(`HTTP error! Status: ${response.status}`)\n                    }\n\n                    const result = await response.json()\n                    if (result.task_status === 'SUCCESS') {\n                        this.isLoading = false\n                        this.videoUrl = result.video_result[0]?.url\n                        this.coverImageUrl = result.video_result[0]?.cover_image_url\n                        return\n                    } else if (result.status === 'failed') {\n                        throw new Error('Video generation failed')\n                    }\n                } catch (error) {\n                    console.error('Error polling task status:', error)\n                    return\n                }\n\n                await new Promise(resolve => setTimeout(resolve, interval))\n            }\n\n            console.error('Task polling timed out')\n        }\n    },\n    mounted() {}\n}\n</script>\n\n<style scoped>\n.container {\n    padding-bottom: 50px;\n}\ntextarea {\n    outline: none;\n}\n.head-title {\n    font-size: 18px;\n    margin-bottom: 10px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}