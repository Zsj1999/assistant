{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { fetchAIResponse, API_CONFIG, fetchTTS } from '../../utils/api';\nimport IconGlm from '../IconBox/IconGlm.vue';\nimport html2canvas from 'html2canvas';\nimport { ImagePrompts } from '../../utils/prompt.js';\nexport default {\n  components: {\n    IconGlm\n  },\n  data() {\n    return {\n      imageUrl: null,\n      // 用于显示图片的 URL\n      imageBase64: null,\n      // 用于存储 Base64 格式的图片\n      generatedContent: null,\n      isLoading: false,\n      // 加载状态\n      isShareDialogOpen: false,\n      // 分享弹窗是否打开\n      selectedFunction: 0,\n      // 默认选择第一个功能\n      functions: ImagePrompts,\n      abortController: null,\n      // 用来保存 AbortController 实例\n      audioUrl: null // 用于存储语音的 URL\n    };\n  },\n  methods: {\n    // 切换功能\n    switchFunction() {\n      this.selectedFunction = (this.selectedFunction + 1) % this.functions.length;\n    },\n    async handleImageUpload(event) {\n      this.generatedContent = null;\n      const file = event.target.files[0];\n      if (!file) return;\n\n      // 检查文件格式\n      const allowedTypes = ['image/jpg', 'image/jpeg', 'image/png'];\n      if (!allowedTypes.includes(file.type)) {\n        alert('仅支持 JPG、JPEG、PNG 格式的图片');\n        return;\n      }\n\n      // 检查图片像素（不超过 6000x6000）\n      const img = new Image();\n      img.src = URL.createObjectURL(file);\n      img.onload = async () => {\n        const width = img.width;\n        const height = img.height;\n        if (width > 6000 || height > 6000) {\n          alert('图片像素不能超过 6000x6000');\n          return;\n        }\n\n        // 如果图片大小超过 5MB，则进行压缩\n        if (file.size > 5 * 1024 * 1024) {\n          try {\n            const compressedFile = await this.compressImage(file);\n            this.imageUrl = URL.createObjectURL(compressedFile);\n            this.imageBase64 = await this.fileToBase64(compressedFile);\n          } catch (error) {\n            console.error('图片压缩失败:', error);\n            alert('图片压缩失败，请重试');\n            return;\n          }\n        } else {\n          // 图片大小在 5MB 以内，直接处理\n          const reader = new FileReader();\n          reader.onload = e => {\n            this.imageUrl = e.target.result; // 用于显示图片\n            this.imageBase64 = e.target.result.split(',')[1]; // 提取 Base64 数据部分\n          };\n          reader.readAsDataURL(file);\n        }\n      };\n    },\n    // 压缩图片\n    compressImage(file) {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.src = URL.createObjectURL(file);\n        img.onload = () => {\n          const canvas = document.createElement('canvas');\n          const ctx = canvas.getContext('2d');\n\n          // 设置最大宽度和高度\n          const maxWidth = 6000;\n          const maxHeight = 6000;\n          let width = img.width;\n          let height = img.height;\n          if (width > maxWidth || height > maxHeight) {\n            const ratio = Math.min(maxWidth / width, maxHeight / height);\n            width *= ratio;\n            height *= ratio;\n          }\n          canvas.width = width;\n          canvas.height = height;\n\n          // 绘制图片到 canvas\n          ctx.drawImage(img, 0, 0, width, height);\n\n          // 将 canvas 转换为 Blob\n          canvas.toBlob(blob => {\n            if (!blob) {\n              reject(new Error('图片压缩失败'));\n              return;\n            }\n\n            // 检查压缩后的文件大小\n            if (blob.size > 5 * 1024 * 1024) {\n              // 如果仍然大于 5MB，降低质量\n              canvas.toBlob(newBlob => {\n                if (!newBlob) {\n                  reject(new Error('图片压缩失败'));\n                  return;\n                }\n                resolve(newBlob);\n              }, file.type, 0.5 // 降低质量\n              );\n            } else {\n              resolve(blob);\n            }\n          }, file.type, 0.8 // 初始质量\n          );\n        };\n        img.onerror = error => reject(error);\n      });\n    },\n    // 将文件转换为 Base64\n    fileToBase64(file) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = e => resolve(e.target.result.split(',')[1]);\n        reader.onerror = error => reject(error);\n        reader.readAsDataURL(file);\n      });\n    },\n    async startRecognition() {\n      // 创建新的 AbortController 实例\n      this.abortController = new AbortController();\n      if (!this.imageBase64) {\n        alert('请先上传图片');\n        return;\n      }\n      this.isLoading = true; // 开始加载\n\n      try {\n        const messages = [{\n          role: 'user',\n          content: [{\n            type: 'image_url',\n            image_url: {\n              url: `data:image/jpeg;base64,${this.imageBase64}` // 使用 Base64 格式的图片\n            }\n          }, {\n            type: 'text',\n            text: this.functions[this.selectedFunction].prompt\n          }]\n        }];\n        const {\n          apiUrl,\n          apiKey,\n          modelName,\n          temperature\n        } = API_CONFIG['stepfun'];\n        const stream = true;\n        // 用于存储流式响应的内容\n        let streamContent = '';\n        await fetchAIResponse(apiUrl, apiKey, modelName, messages, temperature, stream, chunk => {\n          if (this.abortController.signal.aborted) {\n            return; // 请求被中止，退出\n          }\n          // 逐步更新消息内容\n          if (chunk.type === 'content') {\n            streamContent += chunk.content;\n            this.generatedContent = streamContent;\n          }\n        }, this.abortController);\n        // this.generatedContent = data.choices[0].message.content\n\n        // 移除表情符号\n        const cleanedContent = streamContent.replace(/[\\u{1F600}-\\u{1F64F}]/gu, '');\n        // 移除所有双引号和空格\n        const trimmedContent = cleanedContent.replace(/[\"\\s]/g, '');\n        // 调用 generateTTS，并传递清理后的生成内容\n        this.generateTTS(trimmedContent);\n      } catch (error) {\n        console.error('Error fetching AI response:', error);\n        this.generatedContent = '识别失败，请重试';\n      } finally {\n        this.isLoading = false; // 结束加载\n      }\n    },\n    // 生成tts\n    async generateTTS(content) {\n      const {\n        apiUrl,\n        apiKey,\n        modelName\n      } = API_CONFIG['stepfunTTS'];\n      const input = content;\n      const voice = 'jilingshaonv';\n      try {\n        const blob = await fetchTTS(apiUrl, apiKey, modelName, input, voice);\n        this.audioUrl = URL.createObjectURL(blob);\n        // 自动播放音频\n        this.$nextTick(() => {\n          const audioElement = this.$el.querySelector('audio');\n          if (audioElement) {\n            audioElement.play();\n          }\n        });\n      } catch (error) {\n        console.error('Error generating speech:', error);\n      }\n    },\n    playAudio() {\n      const audio = this.$refs.audioRef;\n      if (audio) {\n        audio.play().catch(error => {\n          console.error('音频播放错误:', error);\n        });\n      }\n    },\n    // 打开分享弹窗\n    openShareDialog() {\n      this.isShareDialogOpen = true;\n    },\n    // 关闭分享弹窗\n    closeShareDialog() {\n      this.isShareDialogOpen = false;\n    },\n    // 保存分享内容到本地\n    saveShareToLocal() {\n      const postCardElement = document.querySelector('.post-card'); // 获取 .post-card 元素\n      if (!postCardElement) {\n        alert('未找到分享内容');\n        return;\n      }\n      // 使用 html2canvas 生成图片\n      html2canvas(postCardElement, {\n        allowTaint: true,\n        // 允许跨域\n        useCORS: true,\n        // 启用 CORS\n        scale: 2,\n        // 提高分辨率，避免模糊\n        onclone: clonedDoc => {\n          // 在克隆的文档中调整图片样式，确保图片不会被拉伸\n          const clonedImg = clonedDoc.querySelector('.image-preview img');\n          if (clonedImg) {\n            // 确保图片保持比例\n            clonedImg.style.objectFit = 'cover';\n            clonedImg.style.width = '100%';\n            clonedImg.style.height = '100%';\n          }\n        }\n      }).then(canvas => {\n        // 将 canvas 转为 Data URL\n        const imageUrl = canvas.toDataURL('image/png');\n\n        // 创建一个下载链接并触发点击事件保存图片\n        const link = document.createElement('a');\n        link.href = imageUrl;\n        link.download = 'pet-conversation.png'; // 图片的默认保存名\n        link.click(); // 模拟点击下载图片\n      }).catch(error => {\n        console.error('生成图片失败:', error);\n        alert('生成图片失败，请重试');\n      });\n    }\n  }\n};","map":{"version":3,"names":["fetchAIResponse","API_CONFIG","fetchTTS","IconGlm","html2canvas","ImagePrompts","components","data","imageUrl","imageBase64","generatedContent","isLoading","isShareDialogOpen","selectedFunction","functions","abortController","audioUrl","methods","switchFunction","length","handleImageUpload","event","file","target","files","allowedTypes","includes","type","alert","img","Image","src","URL","createObjectURL","onload","width","height","size","compressedFile","compressImage","fileToBase64","error","console","reader","FileReader","e","result","split","readAsDataURL","Promise","resolve","reject","canvas","document","createElement","ctx","getContext","maxWidth","maxHeight","ratio","Math","min","drawImage","toBlob","blob","Error","newBlob","onerror","startRecognition","AbortController","messages","role","content","image_url","url","text","prompt","apiUrl","apiKey","modelName","temperature","stream","streamContent","chunk","signal","aborted","cleanedContent","replace","trimmedContent","generateTTS","input","voice","$nextTick","audioElement","$el","querySelector","play","playAudio","audio","$refs","audioRef","catch","openShareDialog","closeShareDialog","saveShareToLocal","postCardElement","allowTaint","useCORS","scale","onclone","clonedDoc","clonedImg","style","objectFit","then","toDataURL","link","href","download","click"],"sources":["src/components/ImgBox/Glm4V.vue"],"sourcesContent":["<template>\n    <div class=\"container mx-auto pl-4 pr-4\">\n        <!-- 布局容器 -->\n        <div class=\"flex flex-col lg:flex-row lg:gap-8 lg:mt-10\">\n            <!-- 图片展示区域 -->\n            <div class=\"w-full aspect-square mb-4 rounded-md overflow-hidden lg:w-1/2 lg:mb-0\">\n                <img @click=\"openShareDialog\" :src=\"imageUrl\" alt=\"Uploaded Image\" class=\"w-full h-full object-cover\" v-if=\"imageUrl\" />\n                <div v-else class=\"w-full h-full bg-gray-100 flex items-center justify-center\">\n                    <IconGlm />\n                </div>\n            </div>\n\n            <!-- 右侧区域（生成内容、输入框、按钮） -->\n            <div class=\"w-full lg:w-1/2 flex flex-col justify-between\">\n                <div>\n                    <h3 class=\"head-title font-bold text-left cursor-pointer transition-all relative\">\n                        {{ functions[selectedFunction].name }}\n\n                        <span v-if=\"audioUrl\" @click=\"playAudio\" class=\"absolute right-0 bottom-0\">\n                            <svg t=\"1739841967805\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"8023\" width=\"25\" height=\"25\">\n                                <path d=\"M573.0816 532.48m-403.5072 0a403.5072 403.5072 0 1 0 807.0144 0 403.5072 403.5072 0 1 0-807.0144 0Z\" fill=\"#A5ADF6\" p-id=\"8024\"></path>\n                                <path d=\"M451.4816 490.4448m-403.5072 0a403.5072 403.5072 0 1 0 807.0144 0 403.5072 403.5072 0 1 0-807.0144 0Z\" fill=\"#A5ADF6\" p-id=\"8025\"></path>\n                                <path\n                                    d=\"M169.5744 532.48c0 153.6 85.8624 287.1808 212.1728 355.328 22.6816 3.9424 45.9264 6.144 69.7344 6.144 222.8736 0 403.5072-180.6848 403.5072-403.5072 0-153.6-85.8624-287.1808-212.1728-355.328-22.6816-3.9424-45.9264-6.144-69.7344-6.144-222.8736 0-403.5072 180.6336-403.5072 403.5072z\"\n                                    fill=\"#635DF7\"\n                                    p-id=\"8026\"\n                                ></path>\n                                <path\n                                    d=\"M373.8112 715.8272c-15.0528 0-30.1056-3.9424-43.8272-11.8784-27.4432-15.8208-43.8272-44.2368-43.8272-75.9296V381.4912c0-31.6928 16.384-60.0576 43.8272-75.9296 27.4432-15.8208 60.2112-15.8208 87.6544 0l213.504 123.2896c27.4432 15.8208 43.8272 44.2368 43.8272 75.9296 0 31.6928-16.384 60.0576-43.8272 75.8784l-213.504 123.2896c-13.6704 7.8848-28.7744 11.8784-43.8272 11.8784z m0.0512-340.1216c-0.8192 0-1.8432 0.2048-2.9184 0.8192-2.8672 1.6384-2.8672 4.1472-2.8672 4.9664v246.528c0 0.8192 0 3.328 2.8672 4.9664 2.8672 1.6896 5.0176 0.4096 5.7344 0l213.504-123.2896c0.7168-0.4096 2.8672-1.6384 2.8672-4.9664 0-3.328-2.1504-4.5568-2.8672-4.9664l-213.504-123.2896c-0.4096-0.2048-1.4336-0.768-2.816-0.768z\"\n                                    fill=\"#FFFFFF\"\n                                    p-id=\"8027\"\n                                ></path>\n                            </svg>\n                        </span>\n                    </h3>\n                    <div class=\"mb-4 p-4 bg-gray-100 rounded-lg text-sm\">\n                        <p v-if=\"generatedContent\">\n                            {{ generatedContent }}\n                        </p>\n                        <p v-else class=\"text-gray-500\">\n                            {{ isLoading ? '识别中...' : functions[selectedFunction].placeholder }}\n                        </p>\n                    </div>\n                    <audio :src=\"audioUrl\" ref=\"audioRef\" style=\"display: none\"></audio>\n                </div>\n                <!-- 底部区域（输入框和按钮） -->\n                <div class=\"mt-auto\">\n                    <!-- 上传图片的输入框 -->\n                    <input\n                        type=\"file\"\n                        accept=\"image/jpg, image/jpeg, image/png\"\n                        @change=\"handleImageUpload\"\n                        :disabled=\"isLoading\"\n                        class=\"mb-4 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 disabled:opacity-50 disabled:cursor-not-allowed\"\n                    />\n\n                    <!-- 开始识别按钮 -->\n                    <button\n                        @click=\"startRecognition\"\n                        :disabled=\"!imageUrl || isLoading\"\n                        class=\"text-sm w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 disabled:bg-gray-300 disabled:cursor-not-allowed transition-all\"\n                    >\n                        <span v-if=\"isLoading\">正在识别</span>\n                        <span v-else>{{ functions[selectedFunction].buttonText }}</span>\n                    </button>\n                </div>\n            </div>\n        </div>\n\n        <!-- 分享弹窗 -->\n        <div v-if=\"isShareDialogOpen\" class=\"propup fixed inset-0 flex items-center justify-center bg-black bg-opacity-50\">\n            <div class=\"bg-white rounded-lg p-4 shadow-lg w-96\">\n                <div class=\"flex flex-col items-center\">\n                    <div class=\"post-card\">\n                        <a href=\"javascript:;\" class=\"title\">{{ generatedContent }}</a>\n                        <span class=\"datetime\"></span>\n                        <div class=\"image-preview\">\n                            <img :src=\"imageUrl\" alt=\"Pet Image\" class=\"w-full h-64 object-cover mb-4 rounded-md\" />\n                        </div>\n                        <!-- 修改后的 qrcode-preview 部分 -->\n                        <div class=\"qrcode-preview flex items-center justify-between w-full\">\n                            <div class=\"text-left\">\n                                <p class=\"text-sm text-gray-600\">内容由AI生成</p>\n                                <p class=\"text-sm text-gray-600\">irritable.netlify.app</p>\n                            </div>\n                            <img class=\"qrcode w-12 h-12\" src=\"~@/assets/qrcode.png\" />\n                        </div>\n                    </div>\n                    <br />\n                    <button @click=\"saveShareToLocal\" class=\"w-full bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600\">保存到本地</button>\n                    <button @click=\"closeShareDialog\" class=\"mt-4 text-gray-500 hover:text-gray-700\">关闭</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { fetchAIResponse, API_CONFIG, fetchTTS } from '../../utils/api'\nimport IconGlm from '../IconBox/IconGlm.vue'\nimport html2canvas from 'html2canvas'\nimport { ImagePrompts } from '../../utils/prompt.js'\n\nexport default {\n    components: {\n        IconGlm\n    },\n    data() {\n        return {\n            imageUrl: null, // 用于显示图片的 URL\n            imageBase64: null, // 用于存储 Base64 格式的图片\n            generatedContent: null,\n            isLoading: false, // 加载状态\n            isShareDialogOpen: false, // 分享弹窗是否打开\n            selectedFunction: 0, // 默认选择第一个功能\n            functions: ImagePrompts,\n            abortController: null, // 用来保存 AbortController 实例\n            audioUrl: null // 用于存储语音的 URL\n        }\n    },\n    methods: {\n        // 切换功能\n        switchFunction() {\n            this.selectedFunction = (this.selectedFunction + 1) % this.functions.length\n        },\n        async handleImageUpload(event) {\n            this.generatedContent = null\n            const file = event.target.files[0]\n            if (!file) return\n\n            // 检查文件格式\n            const allowedTypes = ['image/jpg', 'image/jpeg', 'image/png']\n            if (!allowedTypes.includes(file.type)) {\n                alert('仅支持 JPG、JPEG、PNG 格式的图片')\n                return\n            }\n\n            // 检查图片像素（不超过 6000x6000）\n            const img = new Image()\n            img.src = URL.createObjectURL(file)\n            img.onload = async () => {\n                const width = img.width\n                const height = img.height\n                if (width > 6000 || height > 6000) {\n                    alert('图片像素不能超过 6000x6000')\n                    return\n                }\n\n                // 如果图片大小超过 5MB，则进行压缩\n                if (file.size > 5 * 1024 * 1024) {\n                    try {\n                        const compressedFile = await this.compressImage(file)\n                        this.imageUrl = URL.createObjectURL(compressedFile)\n                        this.imageBase64 = await this.fileToBase64(compressedFile)\n                    } catch (error) {\n                        console.error('图片压缩失败:', error)\n                        alert('图片压缩失败，请重试')\n                        return\n                    }\n                } else {\n                    // 图片大小在 5MB 以内，直接处理\n                    const reader = new FileReader()\n                    reader.onload = e => {\n                        this.imageUrl = e.target.result // 用于显示图片\n                        this.imageBase64 = e.target.result.split(',')[1] // 提取 Base64 数据部分\n                    }\n                    reader.readAsDataURL(file)\n                }\n            }\n        },\n        // 压缩图片\n        compressImage(file) {\n            return new Promise((resolve, reject) => {\n                const img = new Image()\n                img.src = URL.createObjectURL(file)\n                img.onload = () => {\n                    const canvas = document.createElement('canvas')\n                    const ctx = canvas.getContext('2d')\n\n                    // 设置最大宽度和高度\n                    const maxWidth = 6000\n                    const maxHeight = 6000\n                    let width = img.width\n                    let height = img.height\n\n                    if (width > maxWidth || height > maxHeight) {\n                        const ratio = Math.min(maxWidth / width, maxHeight / height)\n                        width *= ratio\n                        height *= ratio\n                    }\n\n                    canvas.width = width\n                    canvas.height = height\n\n                    // 绘制图片到 canvas\n                    ctx.drawImage(img, 0, 0, width, height)\n\n                    // 将 canvas 转换为 Blob\n                    canvas.toBlob(\n                        blob => {\n                            if (!blob) {\n                                reject(new Error('图片压缩失败'))\n                                return\n                            }\n\n                            // 检查压缩后的文件大小\n                            if (blob.size > 5 * 1024 * 1024) {\n                                // 如果仍然大于 5MB，降低质量\n                                canvas.toBlob(\n                                    newBlob => {\n                                        if (!newBlob) {\n                                            reject(new Error('图片压缩失败'))\n                                            return\n                                        }\n                                        resolve(newBlob)\n                                    },\n                                    file.type,\n                                    0.5 // 降低质量\n                                )\n                            } else {\n                                resolve(blob)\n                            }\n                        },\n                        file.type,\n                        0.8 // 初始质量\n                    )\n                }\n                img.onerror = error => reject(error)\n            })\n        },\n        // 将文件转换为 Base64\n        fileToBase64(file) {\n            return new Promise((resolve, reject) => {\n                const reader = new FileReader()\n                reader.onload = e => resolve(e.target.result.split(',')[1])\n                reader.onerror = error => reject(error)\n                reader.readAsDataURL(file)\n            })\n        },\n        async startRecognition() {\n            // 创建新的 AbortController 实例\n            this.abortController = new AbortController()\n            if (!this.imageBase64) {\n                alert('请先上传图片')\n                return\n            }\n\n            this.isLoading = true // 开始加载\n\n            try {\n                const messages = [\n                    {\n                        role: 'user',\n                        content: [\n                            {\n                                type: 'image_url',\n                                image_url: {\n                                    url: `data:image/jpeg;base64,${this.imageBase64}` // 使用 Base64 格式的图片\n                                }\n                            },\n                            {\n                                type: 'text',\n                                text: this.functions[this.selectedFunction].prompt\n                            }\n                        ]\n                    }\n                ]\n                const { apiUrl, apiKey, modelName, temperature } = API_CONFIG['stepfun']\n\n                const stream = true\n                // 用于存储流式响应的内容\n                let streamContent = ''\n                await fetchAIResponse(\n                    apiUrl,\n                    apiKey,\n                    modelName,\n                    messages,\n                    temperature,\n                    stream,\n                    chunk => {\n                        if (this.abortController.signal.aborted) {\n                            return // 请求被中止，退出\n                        }\n                        // 逐步更新消息内容\n                        if (chunk.type === 'content') {\n                            streamContent += chunk.content\n                            this.generatedContent = streamContent\n                        }\n                    },\n                    this.abortController\n                )\n                // this.generatedContent = data.choices[0].message.content\n\n                // 移除表情符号\n                const cleanedContent = streamContent.replace(/[\\u{1F600}-\\u{1F64F}]/gu, '')\n                // 移除所有双引号和空格\n                const trimmedContent = cleanedContent.replace(/[\"\\s]/g, '')\n                // 调用 generateTTS，并传递清理后的生成内容\n                this.generateTTS(trimmedContent)\n            } catch (error) {\n                console.error('Error fetching AI response:', error)\n                this.generatedContent = '识别失败，请重试'\n            } finally {\n                this.isLoading = false // 结束加载\n            }\n        },\n        // 生成tts\n        async generateTTS(content) {\n            const { apiUrl, apiKey, modelName } = API_CONFIG['stepfunTTS']\n            const input = content\n            const voice = 'jilingshaonv'\n\n            try {\n                const blob = await fetchTTS(apiUrl, apiKey, modelName, input, voice)\n                this.audioUrl = URL.createObjectURL(blob)\n                // 自动播放音频\n                this.$nextTick(() => {\n                    const audioElement = this.$el.querySelector('audio')\n                    if (audioElement) {\n                        audioElement.play()\n                    }\n                })\n            } catch (error) {\n                console.error('Error generating speech:', error)\n            }\n        },\n        playAudio() {\n            const audio = this.$refs.audioRef\n            if (audio) {\n                audio.play().catch(error => {\n                    console.error('音频播放错误:', error)\n                })\n            }\n        },\n        // 打开分享弹窗\n        openShareDialog() {\n            this.isShareDialogOpen = true\n        },\n\n        // 关闭分享弹窗\n        closeShareDialog() {\n            this.isShareDialogOpen = false\n        },\n\n        // 保存分享内容到本地\n        saveShareToLocal() {\n            const postCardElement = document.querySelector('.post-card') // 获取 .post-card 元素\n            if (!postCardElement) {\n                alert('未找到分享内容')\n                return\n            }\n            // 使用 html2canvas 生成图片\n            html2canvas(postCardElement, {\n                allowTaint: true, // 允许跨域\n                useCORS: true, // 启用 CORS\n                scale: 2, // 提高分辨率，避免模糊\n                onclone: clonedDoc => {\n                    // 在克隆的文档中调整图片样式，确保图片不会被拉伸\n                    const clonedImg = clonedDoc.querySelector('.image-preview img')\n                    if (clonedImg) {\n                        // 确保图片保持比例\n                        clonedImg.style.objectFit = 'cover'\n                        clonedImg.style.width = '100%'\n                        clonedImg.style.height = '100%'\n                    }\n                }\n            })\n                .then(canvas => {\n                    // 将 canvas 转为 Data URL\n                    const imageUrl = canvas.toDataURL('image/png')\n\n                    // 创建一个下载链接并触发点击事件保存图片\n                    const link = document.createElement('a')\n                    link.href = imageUrl\n                    link.download = 'pet-conversation.png' // 图片的默认保存名\n                    link.click() // 模拟点击下载图片\n                })\n                .catch(error => {\n                    console.error('生成图片失败:', error)\n                    alert('生成图片失败，请重试')\n                })\n        }\n    }\n}\n</script>\n\n<style scoped>\n.container {\n    padding-bottom: 50px;\n}\n.head-title {\n    font-size: 16px;\n    margin-bottom: 10px;\n}\n\n.propup {\n    z-index: 999;\n}\n.post-card {\n    width: 100%;\n    border-radius: 20px;\n    color: white;\n    display: flex;\n    flex-direction: column;\n    padding: 20px;\n    background-color: #fff;\n}\n\n.avatar {\n    height: 35px;\n    width: 35px;\n    border-radius: 50%;\n    background-color: blueviolet;\n    background-image: linear-gradient(to top left, blueviolet, rgb(73, 31, 112));\n}\n\n.title {\n    font-size: 20px;\n    line-height: 22px;\n    font-weight: 600;\n    color: #000000;\n    text-decoration: none;\n    transition: all 0.35s ease-in;\n}\n\n.title:hover {\n    text-decoration: underline blueviolet;\n}\n\n.datetime {\n    font-size: 12px;\n    color: rgb(168 179 207);\n    margin: 10px 0;\n}\n\n.image-preview {\n    flex: 1;\n    width: 100%;\n    border-radius: 20px;\n    min-height: 200px;\n}\n.image-preview img {\n    width: 100%;\n    height: 300px;\n    object-fit: over;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}